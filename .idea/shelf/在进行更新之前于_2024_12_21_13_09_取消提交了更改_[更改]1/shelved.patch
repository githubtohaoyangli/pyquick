Index: python_tool.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import ttk, filedialog\r\nimport subprocess\r\nimport os\r\nimport threading\r\nimport requests\r\nimport getpass\r\nimport shutil\r\nimport re\r\nimport time\r\nimport sv_ttk\r\nimport shlex\r\nimport logging\r\nfrom concurrent.futures import ThreadPoolExecutor\r\nimport functools\r\ncancel_event = threading.Event()\r\nuser_name = getpass.getuser()\r\nif os.path.exists(f\"/Users/{user_name}/pt_saved/update\"):\r\n    shutil.rmtree(f\"/Users/{user_name}/pt_saved/update\")\r\n    os.system(\"kill Update\")\r\nVERSIONS = [\r\n    \"3.12.0\",\r\n    \"3.12.1\",\r\n    \"3.12.2\",\r\n    \"3.12.3\",\r\n    \"3.12.4\",\r\n    \"3.12.5\",\r\n    \"3.12.6\",\r\n    \"3.11.0\",\r\n    \"3.11.1\",\r\n    \"3.11.2\",\r\n    \"3.11.3\",\r\n    \"3.11.4\",\r\n    \"3.11.5\",\r\n    \"3.11.6\",\r\n    \"3.11.7\",\r\n    \"3.11.8\",\r\n    \"3.11.9\",\r\n    \"3.10.0\",\r\n    \"3.10.1\",\r\n    \"3.10.2\",\r\n    \"3.10.3\",\r\n    \"3.10.4\",\r\n    \"3.10.5\",\r\n    \"3.10.6\",\r\n    \"3.10.7\",\r\n    \"3.10.8\",\r\n    \"3.10.9\",\r\n    \"3.10.10\",\r\n    \"3.10.11\",\r\n    \"3.9.0\",\r\n    \"3.9.1\",\r\n    \"3.9.2\",\r\n    \"3.9.3\",\r\n    \"3.9.4\",\r\n    \"3.9.5\",\r\n    \"3.9.6\",\r\n    \"3.9.7\",\r\n    \"3.9.8\",\r\n    \"3.9.9\",\r\n    \"3.8.0\",\r\n    \"3.8.1\",\r\n    \"3.8.2\",\r\n    \"3.8.3\",\r\n    \"3.8.4\",\r\n    \"3.8.5\",\r\n    \"3.8.6\",\r\n    \"3.8.7\",\r\n    \"3.8.8\",\r\n    \"3.8.9\",\r\n    \"3.8.10\",\r\n    \"3.7.0\",\r\n    \"3.7.1\",\r\n    \"3.7.2\",\r\n    \"3.7.3\",\r\n    \"3.7.4\",\r\n    \"3.7.5\",\r\n    \"3.7.6\",\r\n    \"3.7.7\",\r\n    \"3.7.8\",\r\n    \"3.7.9\",\r\n    \"3.6.0\",\r\n    \"3.6.1\",\r\n    \"3.6.2\",\r\n    \"3.6.3\",\r\n    \"3.6.4\",\r\n    \"3.6.5\",\r\n    \"3.6.6\",\r\n    \"3.6.7\",\r\n    \"3.6.8\",\r\n    \"3.5.0\",\r\n    \"3.5.1\",\r\n    \"3.5.2\",\r\n    \"3.5.3\",\r\n    \"3.5.4\",\r\n]\r\nMIRROR_PYTHODOWLOADER = [\r\n    #https://registry.npmmirror.com/-/binary/python/3.10.0\r\n    #https://registry.npmmirror.com/-/binary/python/3.10.0/python-3.10.0-amd64.exe\r\n    \"python.org\",\r\n    \"registry.npmmirror.com(China)\"\r\n]\r\nPYTHONTOOL_DOWNLAOD = [\r\n    \"github.io\",\r\n    \"github.com\",\r\n    \"ghp.ci\"\r\n]\r\n\r\n\r\ndef check_python_installation(delay=3000):\r\n    \"\"\"\r\n    检查Python3是否已安装。\r\n    \r\n    本函数尝试执行'python3 --version'命令来检查Python3的安装情况。\r\n    如果命令执行出错，说明Python3未安装，则更新界面标签并禁用相关按钮。\r\n    \"\"\"\r\n    try:\r\n        # 执行命令并获取输出\r\n        version_output = subprocess.check_output([\"python3\", \"--version\"], stderr=subprocess.STDOUT, text=True)\r\n        \r\n        # 验证输出是否包含预期的Python版本信息\r\n        if \"Python 3\" not in version_output:\r\n            raise ValueError(\"Unexpected Python version output: \" + version_output.strip())\r\n    except subprocess.CalledProcessError:\r\n        # 如果命令执行失败，说明Python3未安装\r\n        status_label.config(text=\"Python3 is not installed.\")\r\n        pip_upgrade_button.config(state=\"disabled\")\r\n        install_button.config(state=\"disabled\")\r\n        uninstall_button.config(state=\"disabled\")\r\n        \r\n        # 延时指定时间后清除当前状态标签的文本\r\n        root.after(delay, clear_a)\r\n    except ValueError as e:\r\n        # 处理其他异常，例如版本输出不符合预期\r\n        status_label.config(text=str(e))\r\n        root.after(delay, clear_a)\r\n\r\ndef sav_ver():\r\n    # 获取用户主目录\r\n    user_home = os.path.expanduser(\"~\")\r\n    \r\n    # 获取用户选择的版本\r\n    selected_version = version_combobox.get()\r\n    \r\n    # 检查选择的版本是否在有效版本列表中\r\n    if selected_version in VERSIONS:\r\n        # 构建保存目录路径\r\n        save_dir = os.path.join(user_home, \"pt_saved\")\r\n        \r\n        try:\r\n            # 确保保存目录存在\r\n            os.makedirs(save_dir, exist_ok=True)\r\n            \r\n            # 写入版本信息到文件\r\n            with open(os.path.join(save_dir, \"version.txt\"), \"w\") as file:\r\n                file.write(selected_version)\r\n        except OSError as e:\r\n            # 捕获并打印文件操作异常\r\n            print(f\"Error: {e}\")\r\n\r\ndef refresh_versions():\r\n    while True:\r\n        sav_ver()\r\n        time.sleep(0.1)\r\n\r\n# 启动版本刷新线程\r\n\r\n\r\n# 主线程可以继续执行其他任务\r\nprint(\"Version refreshing started in the background.\")\r\ndef clear_a():\r\n    status_label.config(text=\"\")\r\ndef clear_b():\r\n    sav_label.config(text=\"\")\r\ndef select_destination():\r\n    destination_path = filedialog.askdirectory()\r\n    if destination_path:\r\n        destination_entry.delete(0, tk.END)\r\n        destination_entry.insert(0, destination_path)\r\n\r\n\r\ndef proxies():\r\n    \"\"\"\r\n    获取代理服务器的地址和端口，并返回一个包含代理信息的字典。\r\n\r\n    从用户界面的输入框中读取代理服务器的地址和端口。如果地址或端口为空，\r\n    或者端口不是一个有效的数字，则返回False。否则，将地址和端口格式化为\r\n    一个代理字符串，并创建一个包含HTTP和HTTPS代理的字典。\r\n\r\n    Returns:\r\n        False: 如果地址或端口为空，或端口不是一个有效的数字。\r\n        dict: 包含HTTP和HTTPS代理的字典。\r\n    \"\"\"\r\n    # 获取用户输入的代理服务器地址和端口\r\n    address = address_entry.get()\r\n    port = port_entry.get()\r\n\r\n    # 检查地址是否为空\r\n    if not address:\r\n        return False\r\n\r\n    # 检查端口是否为空\r\n    if not port:\r\n        return False\r\n\r\n    # 验证地址格式\r\n    if not re.match(r'^[a-zA-Z0-9.-]+$', address):\r\n        return False\r\n\r\n    # 尝试将端口转换为整数，并构建代理字符串\r\n    try:\r\n        port = int(port)\r\n        if port <= 0 or port > 65535:\r\n            return False\r\n        proxy = f\"http://{address}:{port}\"\r\n\r\n        # 创建并返回包含代理信息的字典\r\n        proxies = {\r\n            \"http\": proxy,\r\n            \"https\": proxy\r\n        }\r\n        return proxies\r\n    except ValueError:\r\n        return False\r\ndef get_url(des):\r\n    if des==1:\r\n        #selected version\r\n        selected_version=version_combobox.get()\r\n\r\n        selected=selected_version.split(\".\")\r\n\r\n        selea=int(selected[1])\r\n        if selea>=10:\r\n            return f\"https://www.python.org/ftp/python/{selected_version}/python-{selected_version}-macos11.pkg\"\r\n        elif selea<=6:\r\n            return f\"https://www.python.org/ftp/python/{selected_version}/python-{selected_version}-macosx10.6.pkg\"\r\n        else:\r\n            return f\"https://www.python.org/ftp/python/{selected_version}/python-{selected_version}-macosx10.9.pkg\"\r\n    elif des==2:\r\n        return \"https://githubtohaoyangli.github.io/info/info.json\"\r\n    elif des==3:\r\n        return \"https://githubtohaoyangli.github.io/download/python_tool/Mac/Latest/python_tool.dmg\"\r\ndef download_file(destination_path):\r\n    headers = {\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'\r\n    }\r\n    url = get_url(1)\r\n    file_name = url.split(\"/\")[-1]\r\n    destination = os.path.join(destination_path, file_name)\r\n    if os.path.exists(destination):\r\n        os.remove(destination)\r\n\r\n    def download(url, frame):\r\n        download_pb['value'] = 0\r\n        download_pb[\"maximum\"] = 100\r\n        proxie = proxies()\r\n        response = requests.get(url, stream=True, proxies=proxie, headers=headers)\r\n        file_size = int(response.headers.get('content-length', 0))\r\n        with open(frame, \"wb\") as file:\r\n            downloaded = 0\r\n            chunk_size = 1024 * 100\r\n            for data in response.iter_content(chunk_size=chunk_size):\r\n                if cancel_event.is_set():\r\n                    status_label.config(text=\"Download Interrupted!\")\r\n                    root.after(3000, clear_a)\r\n                    return\r\n                file.write(data)\r\n                downloaded += len(data)\r\n                percentage = (downloaded / file_size) * 100\r\n                downloaded_mb = downloaded / (1024 * 1024)\r\n                status_label.config(text=f\"Downloading: {percentage:.3f}% | {downloaded_mb:.3f} MB | {file_size / (1024 * 1024):.3f} MB ｜ \")\r\n                status_label.update()\r\n                download_pb[\"value\"] = percentage\r\n                download_pb.update()\r\n        status_label.config(text=\"Download Complete!\")\r\n        root.after(3000, clear_a)\r\n\r\n    try:\r\n        sav_ver()\r\n        down_thread = threading.Thread(target=download, args=(url, destination), daemon=True)\r\n        down_thread.start()\r\n        cancel_download_button.config(state=\"enabled\")\r\n        down_thread.join()\r\n        cancel_download_button.config(state=\"disabled\")\r\n    except Exception as e:\r\n        status_label.config(text=f\"Download Failed: {str(e)}\")\r\n        root.after(3000, clear_a)\r\n\r\n# 中断下载函数\r\ndef cancel_download():\r\n    cancel_event.set()\r\n    status_label.config(text=\"Cancelling download...\")\r\n    download_pb['value'] = 0  # 重置进度条\r\n    \r\n    # 获取目标文件路径\r\n    destination_path = destination_entry.get()\r\n    url = get_url(1)\r\n    file_name = url.split(\"/\")[-1]\r\n    destination = os.path.join(destination_path, file_name)\r\n    \r\n    # 检查目标文件是否存在，如果存在则删除\r\n    if os.path.exists(destination):\r\n        os.remove(destination)\r\n        status_label.config(text=\"Download cancelled and incomplete file removed.\")\r\n    else:\r\n        status_label.config(text=\"Download cancelled.\")\r\n    \r\n    root.after(3000, clear_a)\r\n\r\n# 下载版本函数\r\ndef download_selected_version():\r\n    destination_path = destination_entry.get()\r\n\r\n    if not os.path.exists(destination_path):\r\n        status_label.config(text=\"Invalid path!\")\r\n        root.after(2000, clear_a)\r\n        return\r\n\r\n    cancel_event.clear()\r\n    down_thread = threading.Thread(target=download_file, args=(destination_path,), daemon=True)\r\n    down_thread.start()\r\nstatus_label = None\r\nupgrade_pip_button = None\r\nroot = None\r\npip_upgrade_button = None\r\n\r\n\r\n\r\n# 配置日志记录\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\ndef get_current_pip_version():\r\n    \"\"\"\r\n    获取当前安装的 pip 版本。\r\n    \r\n    Returns:\r\n        str: 当前 pip 版本号。\r\n    \"\"\"\r\n    try:\r\n        command = \"python3 -m pip --version\"\r\n        args = shlex.split(command)\r\n        output = subprocess.check_output(args).decode().strip()\r\n        logging.info(f\"Command output: {output}\")\r\n        match = re.search(r'pip (\\d+\\.\\d+\\.\\d+)', output)\r\n        if match:\r\n            pip_version = match.group(1)\r\n            return pip_version\r\n        else:\r\n            raise ValueError(\"Unexpected output format from pip --version.\")\r\n    except subprocess.CalledProcessError as e:\r\n        logging.error(\"Failed to get current pip version due to a command error.\", exc_info=True)\r\n        raise RuntimeError(\"Failed to get current pip version due to a command error.\") from e\r\n    except OSError as e:\r\n        logging.error(\"Failed to get current pip version due to an OS error.\", exc_info=True)\r\n        raise RuntimeError(\"Failed to get current pip version due to an OS error.\") from e\r\n    except ValueError as e:\r\n        logging.error(\"Failed to parse the pip version.\", exc_info=True)\r\n        raise RuntimeError(\"Failed to parse the pip version.\") from e\r\n\r\n\r\n\r\n# 创建一个线程池，最大工作线程数为 5\r\nexecutor = ThreadPoolExecutor(max_workers=5)\r\n\r\ndef update_pip_button_text():\r\n    \"\"\"\r\n    更新 pip 升级按钮的文本。\r\n    \"\"\"\r\n    def update_pip_button():\r\n        \"\"\"\r\n        更新按钮文本的具体逻辑。\r\n        \"\"\"\r\n        try:\r\n            # 获取当前 pip 版本\r\n            current_version = get_current_pip_version()\r\n            # 更新按钮文本\r\n            pip_upgrade_button.config(text=f\"Upgrade pip: {current_version}\")\r\n        except Exception as e:\r\n            # 记录错误日志\r\n            logging.error(f\"Error updating pip button text: {str(e)}\")\r\n            # 设置按钮文本为错误提示\r\n            pip_upgrade_button.config(text=\"Error: Failed to update pip version\")\r\n        # 每 5 秒钟再次调用此函数\r\n        root.after(5000, update_pip_button_text)\r\n    # 提交任务到线程池\r\n    executor.submit(update_pip_button)\r\n    \r\n@functools.lru_cache(maxsize=1)\r\ndef get_latest_pip_version():\r\n    \"\"\"\r\n    获取最新可用的 pip 版本。\r\n    \r\n    Returns:\r\n        str: 最新的 pip 版本号。\r\n    \"\"\"\r\n    try:\r\n        # 发起 HTTP GET 请求获取 pip 的最新版本信息\r\n        response = requests.get(\"https://pypi.org/pypi/pip/json\")\r\n        response.raise_for_status()\r\n        \r\n        # 检查响应头中的 Content-Type 是否为 application/json\r\n        if 'application/json' not in response.headers.get('Content-Type', ''):\r\n            raise ValueError(\"Unexpected content type. Expected application/json.\")\r\n        \r\n        # 解析 JSON 响应并提取最新版本号\r\n        latest_version = response.json()[\"info\"][\"version\"]\r\n        return latest_version\r\n    except requests.RequestException as e:\r\n        # 处理网络请求异常\r\n        raise RuntimeError(\"Failed to get latest pip version due to network error.\") from e\r\n    except ValueError as e:\r\n        # 处理解析 JSON 数据时的异常\r\n        raise RuntimeError(\"Failed to parse response data.\") from e\r\nSUCCESS_MSG = \"pip has been updated to {}\"\r\nFAILURE_MSG = \"Failed to update pip: we don't know why\"\r\ndef update_pip(latest_version):\r\n    \"\"\"\r\n    更新 pip 到最新版本。\r\n    \r\n    Args:\r\n        latest_version (str): 最新的 pip 版本号。\r\n    \"\"\"\r\n    # 检查 latest_version 是否符合版本号格式\r\n    if not re.match(r'^\\d+\\.\\d+\\.\\d+$', latest_version):\r\n        raise ValueError(\"Invalid version format\")\r\n\r\n    def try_update(command):\r\n        try:\r\n            up_pip = subprocess.run(command, capture_output=True, text=True, check=True)\r\n            if \"Successfully installed\" in up_pip.stdout:\r\n                status_label.config(text=SUCCESS_MSG.format(latest_version))\r\n                update_pip_button_text()\r\n            else:\r\n                status_label.config(text=FAILURE_MSG)\r\n                update_pip_button_text()\r\n            root.after(3000, clear_a)\r\n        except subprocess.CalledProcessError as e:\r\n            logging.error(f\"Failed to update pip with '{command[0]}': {str(e)}\")\r\n            raise\r\n\r\n    try:\r\n        try_update([\"python3\",\"-m\",\"pip\", \"install\", \"--upgrade\", \"pip\", \"--break-system-packages\"])\r\n    except subprocess.CalledProcessError:\r\n        try_update([\"python3\",\"-m\",\"pip3\", \"install\", \"--upgrade\", \"pip\", \"--break-system-packages\"])\r\n        \r\ndef get_versions():\r\n    \"\"\"\r\n    获取当前和最新的 pip 版本。在前面有函数\r\n    \"\"\"\r\n    try:\r\n        current_version = get_current_pip_version()\r\n        latest_version = get_latest_pip_version()\r\n        return current_version, latest_version\r\n    except (ValueError, TypeError) as e:\r\n        logging.error(f\"Data Error: {str(e)}\")\r\n        raise\r\n    except ConnectionError as e:\r\n        logging.error(f\"Connection Error: {str(e)}\")\r\n        raise\r\n    except Exception as e:\r\n        logging.error(f\"Unknown Error: {str(e)}\")\r\n        raise\r\n\r\ndef update_status(text):\r\n    \"\"\"\r\n    更新状态标签。\r\n    \"\"\"\r\n    root.after(0, lambda: status_label.config(text=text))\r\n\r\ndef update_pip_if_needed(current_version, latest_version):\r\n    \"\"\"\r\n    如果需要，更新 pip 版本。\r\n    \"\"\"\r\n    if current_version != latest_version:\r\n        update_status(f\"Current pip version: {current_version}\\nLatest pip version: {latest_version}\\nUpdating pip...\")\r\n        update_pip(latest_version)\r\n    else:\r\n        update_status(f\"pip is up to date: {current_version}\")\r\n        root.after(3000, clear_a)\r\n\r\ndef check_pip_version():\r\n    \"\"\"\r\n    检查当前 pip 版本是否为最新版本，如果不是则进行更新。\r\n    \"\"\"\r\n    upgrade_pip_button.config(state=\"disabled\")\r\n    try:\r\n        current_version, latest_version = get_versions()\r\n        update_pip_if_needed(current_version, latest_version)\r\n    except Exception as e:\r\n        update_status(f\"Error: {str(e)}\")\r\n    finally:\r\n        root.after(0, lambda: upgrade_pip_button.config(state=\"enabled\"))\r\n\r\ndef upgrade_pip():\r\n    \"\"\"\r\n    启动一个线程来检查并更新 pip。\r\n    \"\"\"\r\n    try:\r\n        subprocess.check_output([\"python3\", \"--version\"])\r\n        upgrade_thread = threading.Thread(target=check_pip_version, daemon=True)\r\n        upgrade_thread.start()\r\n    except FileNotFoundError:\r\n        status_label.config(text=\"Python is not installed.\")\r\n        root.after(3000, clear_a)\r\n    except Exception as e:\r\n        status_label.config(text=f\"Error: {str(e)}\")\r\n        root.after(3000, clear_a)\r\n\r\n\r\ndef install_package():\r\n    def clear_status_label():\r\n        root.after(3000, clear_a)\r\n    install_button.config(state=\"disabled\")\r\n    try:\r\n        # pip freeze > python_modules.txt\r\n        subprocess.check_output([\"python3\", \"--version\"])\r\n        package_name = package_entry.get()\r\n        \r\n        if not re.match(r'^[a-zA-Z0-9\\-_]+$', package_name):\r\n            status_label.config(text=\"Invalid package name.\")\r\n            clear_status_label()\r\n            return\r\n\r\n        def install_package_thread():\r\n            try:\r\n                installed_packages = subprocess.check_output([\"python3\", \"-m\", \"pip\", \"list\", \"--format=columns\"], text=True)\r\n                if package_name.lower() in installed_packages.lower():\r\n                    status_label.config(text=f\"Package '{package_name}' is already installed.\")\r\n                else:\r\n                    result = subprocess.run([\"python3\", \"-m\", \"pip\", \"install\", package_name], capture_output=True, text=True)\r\n                    if \"Successfully installed\" in result.stdout:\r\n                        status_label.config(text=f\"Package '{package_name}' has been installed successfully!\")\r\n                    else:\r\n                        status_label.config(text=f\"Error installing package '{package_name}': {result.stderr}\")\r\n            except subprocess.CalledProcessError as e:\r\n                status_label.config(text=f\"Error running pip command: {e.output}\")\r\n            except Exception as e:\r\n                status_label.config(text=f\"Error installing package '{package_name}': {str(e)}\")\r\n            finally:\r\n                clear_status_label()\r\n        install_thread = threading.Thread(target=install_package_thread, daemon=True)\r\n        install_thread.start()\r\n    except FileNotFoundError:\r\n        status_label.config(text=\"Python is not installed.\")\r\n        clear_status_label()\r\n    except subprocess.CalledProcessError as e:\r\n        status_label.config(text=f\"Error checking Python version: {e.output}\")\r\n        clear_status_label()\r\n    except Exception as e:\r\n        status_label.config(text=f\"Error: {str(e)}\")\r\n        clear_status_label()\r\n    install_button.config(state=\"enabled\")\r\ndef uninstall_package():\r\n    uninstall_button.config(state=\"disabled\")\r\n    try:\r\n        subprocess.check_output([\"python3\", \"--version\"])\r\n        package_name = package_entry.get()\r\n        def uninstall_package_thread():\r\n            try:\r\n                installed_packages = subprocess.check_output([\"python3\", \"-m\", \"pip\", \"list\", \"--format=columns\"], text=True)\r\n                if package_name.lower() in installed_packages.lower():\r\n                    result = subprocess.run([\"python3\", \"-m\", \"pip\", \"uninstall\", \"-y\", package_name], capture_output=True, text=True)\r\n                    if \"Successfully uninstalled\" in result.stdout:\r\n                        status_label.config(text=f\"Package '{package_name}' has been uninstalled successfully!\")\r\n                        root.after(3000,clear_a)\r\n                    else:\r\n                        status_label.config(text=f\"Cannot uninstall package '{package_name}': {result.stderr}\")\r\n                        root.after(3000,clear_a)\r\n                else:\r\n                    status_label.config(text=f\"Package '{package_name}' is not installed.\")\r\n                    root.after(3000,clear_a)\r\n            except Exception as e:\r\n                status_label.config(text=f\"Error uninstalling package '{package_name}': {str(e)}\")\r\n                root.after(3000,clear_a)\r\n        uninstall_thread = threading.Thread(target=uninstall_package_thread, daemon=True)\r\n        uninstall_thread.start()\r\n    except FileNotFoundError:\r\n        status_label.config(text=\"Python is not installed.\")\r\n        root.after(3000,clear_a)\r\n    except Exception as e:\r\n        status_label.config(text=f\"Error: {str(e)}\")\r\n        root.after(3000,clear_a)\r\n    uninstall_button.config(state=\"enabled\")\r\ndef load():\r\n    user_name = getpass.getuser() \r\n    if os.path.exists(f\"/Users/{user_name}/pt_saved/proxy.txt\"):\r\n        with open(f\"/Users/{user_name}/pt_saved/proxy.txt\",\"r\") as re:\r\n            ree=re.readlines()\r\n            reee=len(ree)\r\n            for i in range(reee):\r\n                if \"address:\" in ree[i]:\r\n                    add=ree[i].split(\":\")\r\n                    addlen=len(add)\r\n                    address=add[addlen-1]\r\n                    address=address.strip()\r\n                    address_entry.insert(0,address)\r\n                if \"port\" in ree[i]:\r\n                    poo=ree[i].split(\":\")\r\n                    poolen=len(poo)\r\n                    port=poo[poolen-1]\r\n                    port=port.strip()\r\n                    port_entry.insert(0,port)\r\n    else:\r\n        address_entry.insert(0,\"\")\r\n        port_entry.insert(0,\"\")\r\ndef save():\r\n    address=address_entry.get()\r\n    port=port_entry.get()\r\n    try:\r\n        user_name = getpass.getuser() \r\n        if os.path.exists(f\"/Users/{user_name}/pt_saved/proxy.txt\"):\r\n            os.remove(f\"/Users/{user_name}/pt_saved/proxy.txt\")\r\n        if os.path.exists(f\"/Users/{user_name}/pt_saved/\")==False:\r\n            os.mkdir(f\"/Users/{user_name}/pt_saved/\")\r\n        with open(f\"/Users/{user_name}/pt_saved/proxy.txt\",\"w\")as wr:\r\n            wr.write(f\"address:{address}\\n\")\r\n            wr.write(f\"port:{port}\\n\")\r\n            sav_label.config(text=\"Proxy settings has been saved successfully!\")\r\n            root.after(1000,clear_b)\r\n    except Exception as e:\r\n        sav_label.config(text=f\"Error: Cannot save proxy settings {str(e)}\")\r\n        root.after(1000,clear_b)\r\ndef load_com():\r\n    #f\"/Users/{user_name}/pt_saved/\"\r\n    try:\r\n        user_name = getpass.getuser()\r\n        version_len=len(VERSIONS)\r\n        with open(f\"/Users/{user_name}/pt_saved/version.txt\",\"r\") as r:\r\n            re=r.read()\r\n        for i in range(version_len):\r\n            if re in VERSIONS[i]:\r\n                return int(i)\r\n    except Exception:\r\n        return 0\r\nuser_name = getpass.getuser()\r\n\r\ndef switch_theme():\r\n    user_name = getpass.getuser()\r\n\r\n    if switch.get():\r\n        sv_ttk.set_theme(\"dark\")\r\n        if os.path.exists(f\"/Users/{user_name}/pt_saved/\") == False:\r\n            os.mkdir(f\"/Users/{user_name}/pt_saved/\")\r\n        if os.path.exists(f\"/Users/{user_name}/pt_saved/theme/\") == False:\r\n            os.mkdir(f\"/Users/{user_name}/pt_saved/theme\")\r\n        with open(f\"/Users/{user_name}/pt_saved/theme/theme.txt\", \"w\") as a:\r\n            a.write(\"dark\")\r\n    else:\r\n        sv_ttk.set_theme(\"light\")\r\n        if os.path.exists(f\"/Users/{user_name}/pt_saved/\") == False:\r\n            os.mkdir(f\"/Users/{user_name}/pt_saved/\")\r\n        if os.path.exists(f\"/Users/{user_name}/pt_saved/theme/\") == False:\r\n            os.mkdir(f\"/Users/{user_name}/pt_saved/theme\")\r\n        with open(f\"/Users/{user_name}/pt_saved/theme/theme.txt\", \"w\") as a:\r\n            a.write(\"light\")\r\n\r\n\r\ndef load_theme():\r\n    try:\r\n        user_name = getpass.getuser()\r\n        with open(f\"/Users/{user_name}/pt_saved/theme/theme.txt\", \"r\") as r:\r\n            theme = r.read()\r\n        if theme == \"dark\":\r\n            switch.set(True)\r\n            sv_ttk.set_theme(\"dark\")\r\n        elif theme == \"light\":\r\n            switch.set(False)\r\n            sv_ttk.set_theme(\"light\")\r\n    except Exception:\r\n        sv_ttk.set_theme(\"light\")\r\n\r\n#GUI\r\n\r\nroot = tk.Tk()\r\nroot.title(\"Python Tool\")\r\n\r\n#TAB CONTROL\r\ntab_control = ttk.Notebook(root)\r\n#MODE TAB\r\nfmode = ttk.Frame(root, padding=\"20\")\r\ntab_control.add(fmode,text=\"Mode\")\r\ntab_control.pack(expand=1, fill='both', padx=10, pady=10)\r\nframea_tab = ttk.Frame(fmode)\r\nframea_tab.pack(padx=20, pady=20)\r\n#PYTHON VERSION\r\nversion_label = ttk.Label(framea_tab, text=\"Select Python Version:\")\r\nversion_label.grid(row=0, column=0, pady=10)\r\nselected_version = tk.StringVar()\r\nversion_combobox = ttk.Combobox(framea_tab, textvariable=selected_version, values=VERSIONS, state=\"read\")\r\nversion_combobox.grid(row=0, column=1, pady=10)\r\nins=load_com()\r\nversion_combobox.current(ins)\r\n#SAVE PATH\r\ndestination_label = ttk.Label(framea_tab, text=\"Select Destination:\")\r\ndestination_label.grid(row=1, column=0, pady=10)\r\ndestination_entry = ttk.Entry(framea_tab, width=40)\r\ndestination_entry.grid(row=1, column=1, pady=10)\r\nselect_button = ttk.Button(framea_tab, text=\"Select\", command=select_destination)\r\nselect_button.grid(row=1, column=2, pady=10,padx=10)\r\n#DOWNLOAD\r\ndownload_button = ttk.Button(framea_tab, text=\"Download Selected Version\", command=download_selected_version)\r\ndownload_button.grid(row=2, column=0, columnspan=5, pady=10)\r\ncancel_download_button = ttk.Button(framea_tab, text=\"Cancel Download\", command=cancel_download, state=\"disabled\")\r\ncancel_download_button.grid(row=3, column=0, columnspan=3, pady=10)\r\n#PIP(UPDRADE)\r\npip_upgrade_button = ttk.Button(framea_tab, text=\"Upgrade pip: Checking...\", command=upgrade_pip)\r\npip_upgrade_button.grid(row=4, column=0, columnspan=3, pady=20)\r\nupgrade_pip_button = pip_upgrade_button  # Alias for disabling/enabling later\r\npackage_label = ttk.Label(framea_tab, text=\"Enter Package Name:\")\r\npackage_label.grid(row=5, column=0, pady=10)\r\npackage_entry = ttk.Entry(framea_tab, width=40)\r\npackage_entry.grid(row=5, column=1, pady=10)\r\n#PIP(INSTALL)\r\ninstall_button = ttk.Button(framea_tab, text=\"Install Package\", command=install_package)\r\ninstall_button.grid(row=6, column=0, columnspan=3, pady=10)\r\n#PIP(UNINSTALL)\r\nuninstall_button = ttk.Button(framea_tab, text=\"Uninstall Package\", command=uninstall_package)\r\nuninstall_button.grid(row=7, column=0, columnspan=3, pady=10)\r\n#progressbar-options:length(number),mode(determinate(从左到右)，indeterminate(来回滚动)),...length=500,mode=\"indeterminate\"\r\ndownload_pb=ttk.Progressbar(framea_tab,length=500,mode=\"determinate\")\r\ndownload_pb.grid(row=8,column=0,pady=20,columnspan=3)\r\n#TEXT(TAB1)\r\nstatus_label = ttk.Label(framea_tab, text=\"\", padding=\"10\")\r\nstatus_label.grid(row=9, column=0, columnspan=3)\r\n#SETTINGS TAB\r\nfsetting = ttk.Frame(root, padding=\"20\")\r\ntab_control.add(fsetting,text=\"Settings\")\r\ntab_control.pack(expand=1, fill='both', padx=10, pady=10)\r\nframeb_tab = ttk.Frame(fsetting)\r\nframeb_tab.pack(padx=20, pady=20)\r\n\r\naddress=ttk.Label(frameb_tab,text=\"Address:\")\r\naddress.grid(row=1,column=0,padx=10,pady=10)\r\n\r\naddress_entry=ttk.Entry(frameb_tab,width=15)\r\naddress_entry.grid(row=1,column=1,columnspan=2,pady=10)\r\n\r\nport=ttk.Label(frameb_tab,text=\"Port:\")\r\nport.grid(row=2,column=0,padx=0,pady=10)\r\n\r\nport_entry=ttk.Entry(frameb_tab,width=5)\r\nport_entry.grid(row=2,column=1,pady=10,columnspan=2)\r\n\r\nsav=ttk.Button(frameb_tab,text=\"Apply\",command=save)\r\nsav.grid(row=3,column=0,padx=10,pady=10,columnspan=3)\r\n\r\n\r\nswitch = tk.BooleanVar()  # 创建一个BooleanVar变量，用于检测复选框状态\r\nthemes = ttk.Checkbutton(frameb_tab, text=\"dark mode\", variable=switch, style=\"Switch.TCheckbutton\",command=switch_theme)\r\nthemes.grid(row=5,column=0,padx=10,pady=10,columnspan=3)\r\n\r\nsav_label = ttk.Label(frameb_tab, text=\"\")\r\nsav_label.grid(row=6, column=0,columnspan=3)\r\n#update(not available)\r\n\r\nload()\r\nload_theme()\r\n# Set sv_ttk theme\r\nupdate_pip_button_text()\r\ncheck_python_installation()\r\n\r\nrefresh_thread = threading.Thread(target=refresh_versions, daemon=True)\r\nrefresh_thread.start()\r\nroot.resizable(False,False)\r\nroot.mainloop()\r\n#root.after(3000,)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python_tool.py b/python_tool.py
--- a/python_tool.py	(revision fd00f2c145df2345d17f3f1643c1e2bdbc3dadd6)
+++ b/python_tool.py	(date 1734757715393)
@@ -18,9 +18,9 @@
 if os.path.exists(f"/Users/{user_name}/pt_saved/update"):
     shutil.rmtree(f"/Users/{user_name}/pt_saved/update")
     os.system("kill Update")
+
 VERSIONS = [
-    "3.12.0",
-    "3.12.1",
+    "3.12.0","3.12.1",
     "3.12.2",
     "3.12.3",
     "3.12.4",
@@ -94,6 +94,7 @@
     "3.5.3",
     "3.5.4",
 ]
+
 MIRROR_PYTHODOWLOADER = [
     #https://registry.npmmirror.com/-/binary/python/3.10.0
     #https://registry.npmmirror.com/-/binary/python/3.10.0/python-3.10.0-amd64.exe
@@ -110,14 +111,14 @@
 def check_python_installation(delay=3000):
     """
     检查Python3是否已安装。
-    
+
     本函数尝试执行'python3 --version'命令来检查Python3的安装情况。
     如果命令执行出错，说明Python3未安装，则更新界面标签并禁用相关按钮。
     """
     try:
         # 执行命令并获取输出
         version_output = subprocess.check_output(["python3", "--version"], stderr=subprocess.STDOUT, text=True)
-        
+
         # 验证输出是否包含预期的Python版本信息
         if "Python 3" not in version_output:
             raise ValueError("Unexpected Python version output: " + version_output.strip())
@@ -127,7 +128,7 @@
         pip_upgrade_button.config(state="disabled")
         install_button.config(state="disabled")
         uninstall_button.config(state="disabled")
-        
+
         # 延时指定时间后清除当前状态标签的文本
         root.after(delay, clear_a)
     except ValueError as e:
@@ -138,19 +139,19 @@
 def sav_ver():
     # 获取用户主目录
     user_home = os.path.expanduser("~")
-    
+
     # 获取用户选择的版本
     selected_version = version_combobox.get()
-    
+
     # 检查选择的版本是否在有效版本列表中
     if selected_version in VERSIONS:
         # 构建保存目录路径
         save_dir = os.path.join(user_home, "pt_saved")
-        
+
         try:
             # 确保保存目录存在
             os.makedirs(save_dir, exist_ok=True)
-            
+
             # 写入版本信息到文件
             with open(os.path.join(save_dir, "version.txt"), "w") as file:
                 file.write(selected_version)
@@ -291,20 +292,20 @@
     cancel_event.set()
     status_label.config(text="Cancelling download...")
     download_pb['value'] = 0  # 重置进度条
-    
+
     # 获取目标文件路径
     destination_path = destination_entry.get()
     url = get_url(1)
     file_name = url.split("/")[-1]
     destination = os.path.join(destination_path, file_name)
-    
+
     # 检查目标文件是否存在，如果存在则删除
     if os.path.exists(destination):
         os.remove(destination)
         status_label.config(text="Download cancelled and incomplete file removed.")
     else:
         status_label.config(text="Download cancelled.")
-    
+
     root.after(3000, clear_a)
 
 # 下载版本函数
@@ -332,7 +333,7 @@
 def get_current_pip_version():
     """
     获取当前安装的 pip 版本。
-    
+
     Returns:
         str: 当前 pip 版本号。
     """
@@ -384,12 +385,12 @@
         root.after(5000, update_pip_button_text)
     # 提交任务到线程池
     executor.submit(update_pip_button)
-    
+
 @functools.lru_cache(maxsize=1)
 def get_latest_pip_version():
     """
     获取最新可用的 pip 版本。
-    
+
     Returns:
         str: 最新的 pip 版本号。
     """
@@ -397,11 +398,11 @@
         # 发起 HTTP GET 请求获取 pip 的最新版本信息
         response = requests.get("https://pypi.org/pypi/pip/json")
         response.raise_for_status()
-        
+
         # 检查响应头中的 Content-Type 是否为 application/json
         if 'application/json' not in response.headers.get('Content-Type', ''):
             raise ValueError("Unexpected content type. Expected application/json.")
-        
+
         # 解析 JSON 响应并提取最新版本号
         latest_version = response.json()["info"]["version"]
         return latest_version
@@ -416,7 +417,7 @@
 def update_pip(latest_version):
     """
     更新 pip 到最新版本。
-    
+
     Args:
         latest_version (str): 最新的 pip 版本号。
     """
@@ -442,7 +443,7 @@
         try_update(["python3","-m","pip", "install", "--upgrade", "pip", "--break-system-packages"])
     except subprocess.CalledProcessError:
         try_update(["python3","-m","pip3", "install", "--upgrade", "pip", "--break-system-packages"])
-        
+
 def get_versions():
     """
     获取当前和最新的 pip 版本。在前面有函数
@@ -515,7 +516,7 @@
         # pip freeze > python_modules.txt
         subprocess.check_output(["python3", "--version"])
         package_name = package_entry.get()
-        
+
         if not re.match(r'^[a-zA-Z0-9\-_]+$', package_name):
             status_label.config(text="Invalid package name.")
             clear_status_label()
@@ -582,7 +583,7 @@
         root.after(3000,clear_a)
     uninstall_button.config(state="enabled")
 def load():
-    user_name = getpass.getuser() 
+    user_name = getpass.getuser()
     if os.path.exists(f"/Users/{user_name}/pt_saved/proxy.txt"):
         with open(f"/Users/{user_name}/pt_saved/proxy.txt","r") as re:
             ree=re.readlines()
@@ -607,7 +608,7 @@
     address=address_entry.get()
     port=port_entry.get()
     try:
-        user_name = getpass.getuser() 
+        user_name = getpass.getuser()
         if os.path.exists(f"/Users/{user_name}/pt_saved/proxy.txt"):
             os.remove(f"/Users/{user_name}/pt_saved/proxy.txt")
         if os.path.exists(f"/Users/{user_name}/pt_saved/")==False:
